// Generated by CoffeeScript 1.10.0
(function() {
  var Changes, DEBUG, GOOGLE, Order, OrderItem, Product, SYNC_INTERVAL, UI, VERSION, addAll, addOne, ajax, apply, arrayify, cache, checkSpreadsheetData, chooseSpreadsheet, clearStore, db, debug, executeAppsScriptFunction, filterOrders, findOrCreateOrder, fixSpreadsheetData, formatDatabaseChanges, getAll, getAllBy, getAuthToken, getChanges, getInventoryForUI, getLastSyncedTime, getOrdersForUI, getProperty, getSpreadsheetChanges, getSpreadsheetData, getSpreadsheetID, getUI, getUserSpreadsheets, inventoryHandler, merge, openDB, ordersHandler, putProperty, ref, rejolve, renderInventory, renderOrders, replaceInventory, replaceOrders, saveSpreadsheetData, sellOrderItem, setOrderItemAction, showSynchronizationFailure, showSynchronizationSuccess, showSynchronizing, start, synchronize, taskChain, ui, updateOrderItemPrice, updateOrderPrice, updateSpreadsheet, updateSpreadsheetData, urlencode, utils,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  VERSION = 1;

  DEBUG = 1;

  GOOGLE = {
    api_key: "AIzaSyDY9L74caWHWKwQt3v8PhUKJg1XrV1Sg1M",
    script_id: 'MCYPtGyMDBqYLtIXwqu-mpGxMYCeUYLF8',
    scripts_uri: "https://script.googleapis.com/v1/scripts",
    client_id: "882209763081-kkne3l1sio3iro2u0ddt0mi5m9c6lf61.apps.googleusercontent.com",
    client_secret: "0og9Da5QRapxyv8MvYCAOSkD",
    auth_uri: "https://accounts.google.com/o/oauth2/auth",
    token_uri: "https://www.googleapis.com/oauth2/v3/token",
    scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
  };

  SYNC_INTERVAL = 1000 * 60 * 60;

  ajax = {
    handle: function(handlers) {
      if (handlers == null) {
        handlers = {};
      }
      return function(e) {
        var name1;
        return typeof handlers[name1 = this.status] === "function" ? handlers[name1](e) : void 0;
      };
    },
    request: function(arg) {
      var data, handlers, headers, method, url;
      method = arg.method, url = arg.url, headers = arg.headers, data = arg.data, handlers = arg.handlers;
      if (headers == null) {
        headers = {};
      }
      if (handlers == null) {
        handlers = {};
      }
      if (typeof data === 'object') {
        data = utils.urlencode(data);
      }
      return new Promise(function(resolve, reject) {
        var k, v, xhr;
        xhr = new XMLHttpRequest;
        xhr.open(method, url);
        for (k in headers) {
          if (!hasProp.call(headers, k)) continue;
          v = headers[k];
          xhr.setRequestHeader(k, v);
        }
        for (k in handlers) {
          if (!hasProp.call(handlers, k)) continue;
          v = handlers[k];
          xhr.addEventListener(k, v);
        }
        return xhr.send(data);
      });
    }
  };

  debug = function() {
    var args, li, ul;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (DEBUG) {
      console.debug.apply(console, args);
      ul = document.getElementById('logs');
      li = document.createElement('LI');
      li.innerHTML = "<pre>" + (JSON.stringify(args)) + "</pre>";
      ul.insertBefore(li, ul.firstChild);
    }
    return args;
  };

  rejolve = function(x) {
    return Promise[(x != null) && 'resolve' || 'reject'](x);
  };

  urlencode = function(o) {
    var k, v;
    return ((function() {
      var results1;
      results1 = [];
      for (k in o) {
        if (!hasProp.call(o, k)) continue;
        v = o[k];
        results1.push([k, v].map(encodeURIComponent).join('='));
      }
      return results1;
    })()).join('&');
  };

  taskChain = function(tasks) {
    return tasks.reduce((function(p, t) {
      return p.then(t);
    }), Promise.resolve());
  };

  arrayify = function(obj) {
    var j, len, results1, x;
    results1 = [];
    for (j = 0, len = obj.length; j < len; j++) {
      x = obj[j];
      results1.push(x);
    }
    return results1;
  };

  apply = function(f) {
    return function() {
      var a;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function(o) {
        return o[f].apply(o, a);
      };
    };
  };

  putProperty = function(o) {
    return function(k) {
      return function(x) {
        return o[k] = x;
      };
    };
  };

  getProperty = function(o) {
    return function(k) {
      if (o[k] != null) {
        return Promise.resolve(o[k]);
      } else {
        return Promise.reject(putProperty(o)(k));
      }
    };
  };

  utils = {
    rejolve: rejolve,
    urlencode: urlencode,
    ajax: ajax,
    taskChain: taskChain,
    arrayify: arrayify,
    getProperty: getProperty,
    putProperty: putProperty
  };

  OrderItem = function(data) {
    var j, k, len, ref, v;
    for (k in data) {
      if (!hasProp.call(data, k)) continue;
      v = data[k];
      if (v !== '') {
        this[k] = v;
      }
    }
    ref = ['updated', 'date_sold', 'hold_until'];
    for (j = 0, len = ref.length; j < len; j++) {
      k = ref[j];
      if (this[k]) {
        this[k] = new Date(this[k]);
      }
    }
    return this;
  };

  OrderItem.prototype.getOrderID = function() {
    var ref;
    return (ref = this.order) != null ? ref : this.customer;
  };

  OrderItem.prototype.getPrice = Number((ref = this.price) != null ? ref : 0).toFixed(2);

  OrderItem.prototype.bsClass = function() {
    switch (this.status) {
      case 'SOLD':
        return 'success';
      case 'OPEN':
        return 'info';
      case 'HOLD':
        return 'warning';
      case 'SHORT':
        return 'success';
      default:
        return 'default';
    }
  };

  OrderItem.prototype.action = function() {
    switch (this.status) {
      case 'OPEN':
        return 'Sell';
      case 'SOLD':
        return 'Undo';
      default:
        return 'Open';
    }
  };

  OrderItem.prototype.isSold = function() {
    return this.status === 'SOLD';
  };

  OrderItem.prototype.isOpen = function() {
    return this.status === 'OPEN';
  };

  OrderItem.prototype.isHold = function() {
    return this.status === 'HOLD';
  };

  OrderItem.prototype.isShort = function() {
    return this.status === 'SHORT';
  };

  OrderItem.prototype.context = function() {
    switch (this.status) {
      case 'OPEN':
        return 'info';
      case 'HOLD':
        return 'warning';
      case 'SHORT':
        return 'danger';
      case 'SOLD':
        return 'success';
      default:
        return 'default';
    }
  };

  OrderItem.prototype.getTotal = function() {
    var item, j, len, ref1, total;
    total = 0;
    ref1 = this.items;
    for (j = 0, len = ref1.length; j < len; j++) {
      item = ref1[j];
      total += Number(item.getPrice());
    }
    return total.toFixed(2);
  };

  Product = function(data) {
    var j, k, len, ref1, v;
    for (k in data) {
      if (!hasProp.call(data, k)) continue;
      v = data[k];
      if (v !== '') {
        this[k] = v;
      }
    }
    ref1 = ['updated'];
    for (j = 0, len = ref1.length; j < len; j++) {
      k = ref1[j];
      if (this[k]) {
        this[k] = new Date(this[k]);
      }
    }
    return this;
  };

  Product.prototype.status = function() {
    if (this.available === 0) {
      return 'warning';
    }
    if (this.available < 0) {
      return 'danger';
    }
  };

  Order = function(arg) {
    this.customer = arg.customer, this.id = arg.id;
    this.orderItems = [];
    return this;
  };

  Order.prototype.status = function() {
    var ref1;
    if ((ref1 = this.orderItems) != null ? ref1.every(function(i) {
      var ref2;
      return (ref2 = i.status) === 'SOLD';
    }) : void 0) {
      return 'CLOSED';
    }
    return 'OPEN';
  };

  Order.prototype.context = function() {
    switch (this.status()) {
      case 'OPEN':
        return 'info';
      case 'CLOSED':
        return 'default';
    }
  };

  Order.prototype.bsClass = function() {
    switch (this.status()) {
      case 'OPEN':
        return 'panel-info';
      case 'CLOSED':
        return 'panel-default';
    }
  };

  Order.prototype.items = function() {
    return this.orderItems;
  };

  Order.prototype.items.open = function() {
    var i, j, len, ref1, results1;
    ref1 = this.items;
    results1 = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      if (i.status === 'OPEN') {
        results1.push(i);
      }
    }
    return results1;
  };

  Order.prototype.items.sold = function() {
    var i, j, len, ref1, results1;
    ref1 = this.items;
    results1 = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      if (i.status === 'SOLD') {
        results1.push(i);
      }
    }
    return results1;
  };

  Order.prototype.items.hold = function() {
    var i, j, len, ref1, results1;
    ref1 = this.items;
    results1 = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      if (i.status === 'HOLD') {
        results1.push(i);
      }
    }
    return results1;
  };

  Order.prototype.items.short = function() {
    var i, j, len, ref1, results1;
    ref1 = this.items;
    results1 = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      if (i.status === 'SHORT') {
        results1.push(i);
      }
    }
    return results1;
  };

  UI = function(arg) {
    var $, $$, Mustache, Promise, addClass, authorize, console, disable, document, enable, goto, hide, ignore, listen, location, removeClass, render, replaceClass, setTimeout, show, sync, update;
    document = arg.document, location = arg.location, Promise = arg.Promise, Mustache = arg.Mustache, setTimeout = arg.setTimeout, console = arg.console, sync = arg.sync, authorize = arg.authorize;
    $ = (function(_this) {
      return function(q) {
        return document.querySelector(q);
      };
    })(this);
    $$ = (function(_this) {
      return function(q) {
        var e, j, len, ref1, results1;
        ref1 = document.querySelectorAll(q);
        results1 = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          e = ref1[j];
          results1.push(e);
        }
        return results1;
      };
    })(this);
    goto = (function(_this) {
      return function(q) {
        var lastLocation, ref1;
        return ref1 = [location.hash, q], lastLocation = ref1[0], location.hash = ref1[1], ref1;
      };
    })(this);
    show = function() {
      var e, j, len, q, qs, results1;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (j = 0, len = qs.length; j < len; j++) {
        q = qs[j];
        results1.push((function() {
          var l, len1, ref1, results2;
          ref1 = $$(q);
          results2 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            e = ref1[l];
            results2.push(e.hidden = false);
          }
          return results2;
        })());
      }
      return results1;
    };
    hide = function() {
      var e, j, len, q, qs, results1;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (j = 0, len = qs.length; j < len; j++) {
        q = qs[j];
        results1.push((function() {
          var l, len1, ref1, results2;
          ref1 = $$(q);
          results2 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            e = ref1[l];
            results2.push(e.hidden = true);
          }
          return results2;
        })());
      }
      return results1;
    };
    enable = function() {
      var e, j, len, q, qs, results1;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (j = 0, len = qs.length; j < len; j++) {
        q = qs[j];
        results1.push((function() {
          var l, len1, ref1, results2;
          ref1 = $$(q);
          results2 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            e = ref1[l];
            results2.push(e.disabled = false);
          }
          return results2;
        })());
      }
      return results1;
    };
    disable = function() {
      var e, j, len, q, qs, results1;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results1 = [];
      for (j = 0, len = qs.length; j < len; j++) {
        q = qs[j];
        results1.push((function() {
          var l, len1, ref1, results2;
          ref1 = $$(q);
          results2 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            e = ref1[l];
            results2.push(e.disabled = true);
          }
          return results2;
        })());
      }
      return results1;
    };
    addClass = function() {
      var qs;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function() {
        var c, classes, e, j, len, q, results1;
        classes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        results1 = [];
        for (j = 0, len = qs.length; j < len; j++) {
          q = qs[j];
          results1.push((function() {
            var l, len1, ref1, results2;
            ref1 = $$(q);
            results2 = [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              e = ref1[l];
              results2.push((function() {
                var len2, m, results3;
                results3 = [];
                for (m = 0, len2 = classes.length; m < len2; m++) {
                  c = classes[m];
                  results3.push(e.classList.add(c));
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      };
    };
    removeClass = function() {
      var qs;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function() {
        var c, classes, e, j, len, q, results1, x;
        classes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        results1 = [];
        for (j = 0, len = qs.length; j < len; j++) {
          q = qs[j];
          results1.push((function() {
            var l, len1, ref1, results2;
            ref1 = $$(q);
            results2 = [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              e = ref1[l];
              results2.push((function() {
                var len2, m, results3;
                results3 = [];
                for (m = 0, len2 = classes.length; m < len2; m++) {
                  c = classes[m];
                  results3.push((function() {
                    var len3, n, ref2, results4;
                    ref2 = e.classList;
                    results4 = [];
                    for (n = 0, len3 = ref2.length; n < len3; n++) {
                      x = ref2[n];
                      if (x != null ? x.match(new RegExp("^" + c + "$")) : void 0) {
                        results4.push(e.classList.remove(x));
                      }
                    }
                    return results4;
                  })());
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      };
    };
    replaceClass = function() {
      var qs;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function() {
        var remove;
        remove = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return function() {
          var add, c, j, l, len, len1, len2, m, q, results1;
          add = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          for (j = 0, len = qs.length; j < len; j++) {
            q = qs[j];
            for (l = 0, len1 = remove.length; l < len1; l++) {
              c = remove[l];
              removeClass(q)(c);
            }
          }
          results1 = [];
          for (m = 0, len2 = qs.length; m < len2; m++) {
            q = qs[m];
            results1.push((function() {
              var len3, n, results2;
              results2 = [];
              for (n = 0, len3 = add.length; n < len3; n++) {
                c = add[n];
                results2.push(addClass(q)(c));
              }
              return results2;
            })());
          }
          return results1;
        };
      };
    };
    render = function() {
      var partials, qs;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      partials = function(k) {
        return $(k).innerHTML || (function() {
          throw "Partial template missing: " + k;
        })();
      };
      return function(view) {
        var e, j, l, len, len1, q, ref1, ref2, t;
        for (j = 0, len = qs.length; j < len; j++) {
          q = qs[j];
          ref1 = $$(q);
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            e = ref1[l];
            if (!(t = e.dataset.template)) {
              return console.error("No template", e);
            }
            if (!(t = (ref2 = $(t)) != null ? ref2.innerHTML : void 0)) {
              return console.error("Template missing", t);
            }
            e.innerHTML = Mustache.render(t, view, partials);
          }
        }
        return view;
      };
    };
    listen = function() {
      var qs;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function(event) {
        return function(callback) {
          var e, j, l, len, len1, q, ref1, results1;
          results1 = [];
          for (j = 0, len = qs.length; j < len; j++) {
            q = qs[j];
            ref1 = $$(q);
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              e = ref1[l];
              e.removeEventListener(event, callback);
            }
            results1.push((function() {
              var len2, m, ref2, results2;
              ref2 = $$(q);
              results2 = [];
              for (m = 0, len2 = ref2.length; m < len2; m++) {
                e = ref2[m];
                results2.push(e.addEventListener(event, callback));
              }
              return results2;
            })());
          }
          return results1;
        };
      };
    };
    ignore = function() {
      var qs;
      qs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function(event) {
        return function(callback) {
          var e, j, len, q, results1;
          results1 = [];
          for (j = 0, len = qs.length; j < len; j++) {
            q = qs[j];
            results1.push((function() {
              var l, len1, ref1, results2;
              ref1 = $$(q);
              results2 = [];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                e = ref1[l];
                results2.push(e.removeEventListener(event, callback));
              }
              return results2;
            })());
          }
          return results1;
        };
      };
    };
    update = function(arg1) {
      var inventory, orders;
      orders = arg1.orders, inventory = arg1.inventory;
      render('#orders .panel-group.orders')({
        orders: orders
      });
      render('#inventory tbody.products')({
        inventory: inventory
      });
      return {
        orders: orders,
        inventory: inventory
      };
    };
    return {
      $: $,
      $$: $$,
      goto: goto,
      show: show,
      hide: hide,
      enable: enable,
      disable: disable,
      render: render,
      update: update,
      addClass: addClass,
      removeClass: removeClass,
      replaceClass: replaceClass,
      listen: listen,
      ignore: ignore
    };
  };

  Changes = function(arg) {
    var ui;
    ui = arg.ui;
  };

  ui = null;

  getUI = new Promise(function(resolve, reject) {
    return window.addEventListener('DOMContentLoaded', function() {
      return resolve(ui = UI(this));
    });
  });

  ordersHandler = function(event) {
    var classList, dataset, form, id, name, nodeName, orderitem, target, type;
    type = event.type, target = event.target;
    name = target.name, id = target.id, classList = target.classList, dataset = target.dataset, nodeName = target.nodeName;
    if (type === 'click') {
      if (nodeName === 'A' && (dataset.action != null)) {
        event.preventDefault();
        form = target;
        while (form.nodeName !== 'FORM') {
          form = form.parentElement;
        }
        setOrderItemAction(form, dataset.action);
      }
      if (nodeName === 'BUTTON' && (dataset.action != null)) {
        orderitem = dataset.orderitem;
        event.preventDefault();
        switch (dataset.action) {
          case 'Sell':
            sellOrderItem(target);
            break;
          case 'Open':
            openOrderItem(target);
            break;
          case 'Hold':
            holdOrderItem(target);
            break;
          case 'Short':
            shortOrderItem(target);
            break;
          case 'Undo':
            undoLastOrderItemAction(target);
            break;
          case 'Checkout':
            checkoutOrderItem(target);
        }
      }
    }
    if (type === 'input') {
      if (target.name === 'price') {
        updateOrderItemPrice(target);
      } else if (target.name === 'filter') {
        filterOrders(target.value);
      }
    }
    if (type === 'submit') {
      event.preventDefault();
      if (target.name === 'filter') {
        filterOrders(target.value);
      }
      if (target.name === 'price') {
        return updateOrderItemPrice(target.price);
      }
    }
  };

  inventoryHandler = function(event) {
    var target;
    return target = event.target, event;
  };

  start = function() {
    return Promise.resolve().then(synchronize).then(renderInventory).then(renderOrders).then(function() {
      return ui.listen('#orders')('click')(ordersHandler);
    }).then(function() {
      return ui.listen('#orders')('input')(ordersHandler);
    }).then(function() {
      return ui.listen('#orders')('submit')(ordersHandler);
    }).then(function() {
      return ui.listen('#inventory')('click')(inventoryHandler);
    }).then(function() {
      return ui.goto('#orders');
    });
  };

  synchronize = function() {
    return Promise.resolve().then(showSynchronizing).then(getSpreadsheetChanges).then(getChanges).then(updateSpreadsheet).then(showSynchronizationSuccess)["catch"](showSynchronizationFailure);
  };

  renderInventory = function() {
    debug("renderInventory...");
    return getUI.then(getInventoryForUI).then(function(products) {
      return ui.render('#inventory tbody.products')({
        products: products
      });
    });
  };

  renderOrders = function() {
    return getUI.then(getOrdersForUI).then(function(orders) {
      return ui.render('#orders div.orders')({
        orders: orders
      });
    });
  };

  getInventoryForUI = function() {
    return getAll('inventory')().then(function(products) {
      var j, len, p, results1;
      results1 = [];
      for (j = 0, len = products.length; j < len; j++) {
        p = products[j];
        results1.push(new Product(p));
      }
      return results1;
    });
  };

  getOrdersForUI = function() {
    return getAll('orders')().then(function(orderItems) {
      var customer, id, j, k, len, o, order, orderItem, order_id, orders, results1, v;
      orderItems = (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = orderItems.length; j < len; j++) {
          o = orderItems[j];
          results1.push(new OrderItem(o));
        }
        return results1;
      })();
      orders = {};
      for (id = j = 0, len = orderItems.length; j < len; id = ++j) {
        orderItem = orderItems[id];
        order_id = orderItem.getOrderID();
        customer = orderItem.customer;
        order = orders[order_id] != null ? orders[order_id] : orders[order_id] = new Order({
          customer: customer,
          id: id
        });
        orderItem.order = order;
        orderItem.order_id = id;
        order.orderItems.push(orderItem);
      }
      results1 = [];
      for (k in orders) {
        if (!hasProp.call(orders, k)) continue;
        v = orders[k];
        if (v.status() !== 'CLOSED') {
          results1.push(v);
        }
      }
      return results1;
    });
  };

  merge = function(first) {
    return function(second) {
      var k, v;
      for (k in second) {
        if (!hasProp.call(second, k)) continue;
        v = second[k];
        first[k] = v;
      }
      return first;
    };
  };

  getChanges = function() {
    return debug("Getting changes...");
  };

  formatDatabaseChanges = function(changes) {
    var change, j, len, results1;
    results1 = [];
    for (j = 0, len = changes.length; j < len; j++) {
      change = changes[j];
      results1.push(changeToScriptParams(change));
    }
    return results1;
  };

  getAll = function(store) {
    return function() {
      return new Promise(function(resolve, reject) {
        return openDB.then(function() {
          var request, results;
          results = [];
          request = db.transaction(store).objectStore(store).openCursor();
          request.addEventListener('error', function(e) {
            throw Error(e);
          });
          return request.addEventListener('success', function() {
            if (this.result == null) {
              return resolve(results);
            }
            results.push(this.result.value);
            return this.result["continue"]();
          });
        });
      });
    };
  };

  getAllBy = function(store) {
    return function(index) {
      return new Promise(function(resolve, reject) {
        return openDB.then(function() {
          var request, results;
          results = [];
          request = db.transaction(store).objectStore(store).index(index).openCursor();
          request.addEventListener('error', function(e) {
            throw Error(e);
          });
          return request.addEventListener('success', function() {
            if (this.result == null) {
              return resolve(results);
            }
            results.push(this.result.value);
            return this.result["continue"]();
          });
        });
      });
    };
  };

  updateSpreadsheet = function(changes) {
    return debug("Syncing changes to DB", changes);
  };

  showSynchronizing = function() {
    return getUI.then(function() {
      ui.addClass('body')('synchronizing');
      return ui.addClass('.alerts .synchronizing')('working');
    });
  };

  showSynchronizationSuccess = function() {
    return getUI.then(function() {
      ui.replaceClass('.alerts .synchronizing')('working')('success');
      return setTimeout((function() {
        return ui.removeClass('body')('synchronizing');
      }), 5000);
    });
  };

  showSynchronizationFailure = function(reason) {
    return getUI.then(function() {
      console.error(reason);
      debug(reason, Error());
      ui.replaceClass('.alerts .synchronizing')('working')('error');
      ui.$('.alerts .synchronizing .reason').innerHTML = reason;
      return setTimeout((function() {
        return ui.removeClass('body')('synchronizing');
      }), 5000);
    });
  };

  getLastSyncedTime = function() {
    var lastSynced;
    lastSynced = localStorage.lastSynced;
    if (lastSynced != null) {
      return new Date(lastSynced);
    }
  };

  getSpreadsheetID = function() {
    return new Promise(function(resolve, reject) {
      var spreadsheet_id;
      spreadsheet_id = localStorage.spreadsheet_id;
      if (spreadsheet_id) {
        return resolve(spreadsheet_id);
      }
      chooseSpreadsheet();
      return reject("You need to choose a spreadsheet.");
    });
  };

  localStorage.spreadsheet_id = "1hFU6T4UsSHaD8GMTpPEFMFcbQbHtsqX-jhQNXX-00bI";

  chooseSpreadsheet = function() {
    return getUI.then(function() {
      ui.goto('#choose-spreadsheet');
      ui.addClass('#choose-spreadsheet')('fetching');
      return getUserSpreadsheets().then(function(spreadsheets) {
        ui.render('#choose-spreadsheet select')({
          spreadsheets: spreadsheets
        });
        ui.enable('#choose-spreadsheet select');
        ui.replaceClass('#choose-spreadsheet')('fetching')('waiting');
        return ui.listen('#choose-spreadsheet select')('change')(function() {
          ui.enable('#choose-spreadsheet button');
          return ui.listen('#choose-spreadsheet form')('submit')(function(event) {
            event.preventDefault();
            localStorage.spreadsheet_id = this.spreadsheet.value;
            return start();
          });
        });
      });
    });
  };

  cache = function(storage) {
    return function(key) {
      return function(f) {
        if (storage[key]) {
          return Promise.resolve(JSON.parse(storage.getItem(key)));
        }
        return f().then(function(result) {
          if (DEBUG != null) {
            storage.setItem(key, JSON.stringify(result));
          }
          return result;
        });
      };
    };
  };

  getUserSpreadsheets = function() {
    return cache(localStorage)('spreadsheets')(function() {
      return executeAppsScriptFunction('SpreadsheetFiles')();
    });
  };

  getSpreadsheetData = function(params) {
    debug("getSpreadsheetData...");
    return cache(localStorage)('data')(function() {
      return executeAppsScriptFunction('GetChanges').apply(null, params);
    });
  };

  checkSpreadsheetData = function(arg) {
    var inventory, orders;
    inventory = arg.inventory, orders = arg.orders;
    debug("checkSpreadsheetData...");
    if (!((inventory != null) && (orders != null))) {
      chooseSpreadsheet();
      return Promise.reject("Couldn't find INVENTORY/ORDERS on the spreadsheet. Try another one.");
    }
    return {
      inventory: inventory,
      orders: orders
    };
  };

  saveSpreadsheetData = function(arg) {
    var inventory, oldInventory, oldOrders, orders;
    orders = arg.orders, inventory = arg.inventory;
    debug("saveSpreadsheetData...", arguments);
    oldOrders = oldInventory = null;
    return openDB.then(function() {
      return replaceOrders(orders);
    }).then(function() {
      return function(newOrders) {
        var ref1;
        return ref1 = [orders, newOrders], oldOrders = ref1[0], orders = ref1[1], ref1;
      };
    }).then(function() {
      return replaceInventory(inventory);
    }).then(function() {
      return function(newInventory) {
        var ref1;
        return ref1 = [inventory, newInventory], oldInventory = ref1[0], inventory = ref1[1], ref1;
      };
    });
  };

  fixSpreadsheetData = function(arg) {
    var inventory, oldInventory, oldOrders, orders;
    oldOrders = arg.oldOrders, oldInventory = arg.oldInventory, orders = arg.orders, inventory = arg.inventory;
    debug("fixSpreadsheetData...");
    return Promise.resolve("Sending the missing IDs");
  };

  updateSpreadsheetData = function(arg) {
    var inventory, orders;
    orders = arg.orders, inventory = arg.inventory;
    debug("updateSpreadsheetData...");
    return Promise.resolve("Sending the changes to the spreadsheet");
  };

  findOrCreateOrder = function(order) {
    return findOrder(order)["catch"](function() {
      return createOrder(order);
    }).then(merge(order));
  };

  getSpreadsheetChanges = function() {
    debug("getSpreadsheetChanges...");
    return Promise.resolve().then(function() {
      return Promise.all([getSpreadsheetID(), getLastSyncedTime()]);
    }).then(getSpreadsheetData).then(checkSpreadsheetData).then(saveSpreadsheetData).then(fixSpreadsheetData).then(updateSpreadsheetData);
  };

  db = null;

  openDB = new Promise(function(resolve, reject) {
    var migrate, migrations, request;
    migrations = [
      function(db) {
        var os;
        os = db.createObjectStore('orders', {
          keyPath: 'id',
          autoIncrement: true
        });
        os.createIndex('byStatus', 'status', {
          unique: false
        });
        os = db.createObjectStore('inventory', {
          keypath: 'product'
        });
        os.createIndex('byType', 'type', {
          unique: false
        });
        os = db.createObjectStore('changes', {
          keypath: 'id',
          autoIncrement: true
        });
        return os.createIndex('byTime', 'time', {
          unique: false
        });
      }
    ];
    migrate = function(arg) {
      var migration, newVersion, oldVersion;
      oldVersion = arg.oldVersion, newVersion = arg.newVersion;
      return Promise.all((function() {
        var j, len, ref1, results1;
        ref1 = migrations.slice(oldVersion, +newVersion + 1 || 9e9);
        results1 = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          migration = ref1[j];
          results1.push(migration(this.result));
        }
        return results1;
      }).call(this)).then(debug("Migrated!"));
    };
    request = indexedDB.open('stockman', VERSION);
    request.addEventListener('error', function() {
      return reject(this.error);
    });
    request.addEventListener('success', function() {
      return resolve(db = this.result);
    });
    request.addEventListener('blocked', function() {
      return reject(this.error);
    });
    return request.addEventListener('upgradeneeded', migrate);
  });

  getAuthToken = function() {
    return oauth2rizer(GOOGLE)();
  };

  executeAppsScriptFunction = function(functionName) {
    var data, script_id, scripts_uri, url;
    scripts_uri = GOOGLE.scripts_uri, script_id = GOOGLE.script_id;
    url = scripts_uri + "/" + script_id + ":run";
    data = {
      "function": functionName,
      devMode: true
    };
    return function() {
      var parameters;
      parameters = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new Promise(function(resolve, reject) {
        var error, handlers, load, method, post;
        load = function() {
          var response;
          response = JSON.parse(this.responseText);
          if (response.error != null) {
            console.error(response.error);
            return reject(response.error);
          }
          return resolve(response.response.result);
        };
        error = function() {
          var response;
          response = JSON.parse(this.responseText);
          console.error("Error executing Apps Script", this.error);
          return reject(this.error);
        };
        handlers = {
          load: load,
          error: error
        };
        data.parameters = parameters;
        method = 'post';
        post = function(token) {
          var headers;
          method = 'post';
          headers = {
            Authorization: "Bearer " + token
          };
          data = JSON.stringify(data);
          return ajax.request({
            method: method,
            url: url,
            headers: headers,
            data: data,
            handlers: handlers
          });
        };
        return getAuthToken().then(post);
      });
    };
  };

  clearStore = function(store) {
    debug("clearStore", store);
    return new Promise(function(resolve, reject) {
      return openDB.then(function() {
        var request;
        request = db.transaction(store, 'readwrite').objectStore(store).clear();
        request.addEventListener('error', function() {
          return reject(this.error.message);
        });
        return request.addEventListener('success', function() {
          return resolve(this.result);
        });
      });
    });
  };

  addOne = function(store, key) {
    return function(record) {
      return new Promise(function(resolve, reject) {
        return openDB.then(function() {
          var args, ref1, request;
          args = [record];
          if (key != null) {
            args.push(record[key]);
          }
          request = (ref1 = db.transaction(store, 'readwrite').objectStore(store)).add.apply(ref1, args);
          request.addEventListener('error', function() {
            console.error("Failed to add record to " + store, record, this.error.message);
            reject(this.error.message);
            throw this.error.message;
          });
          return request.addEventListener('success', function() {
            return resolve(this.result);
          });
        });
      });
    };
  };

  addAll = function(store, key) {
    return function(records) {
      var record;
      return Promise.all((function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = records.length; j < len; j++) {
          record = records[j];
          results1.push(addOne(store, key)(record));
        }
        return results1;
      })());
    };
  };

  replaceInventory = function(products) {
    return clearStore('inventory').then(function() {
      var p;
      return addAll('inventory', 'product')((function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = products.length; j < len; j++) {
          p = products[j];
          results1.push(new Product(p));
        }
        return results1;
      })());
    });
  };

  replaceOrders = function(orderItems) {
    return clearStore('orders').then(function() {
      var o;
      return addAll('orders')((function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = orderItems.length; j < len; j++) {
          o = orderItems[j];
          results1.push(new OrderItem(o));
        }
        return results1;
      })());
    });
  };

  filterOrders = function(match) {
    var customerName, j, len, order, orders, results1, rex;
    rex = new RegExp("" + match, "i");
    orders = ui.$$('#orders .order');
    results1 = [];
    for (j = 0, len = orders.length; j < len; j++) {
      order = orders[j];
      customerName = ui.$("#" + order.id + " .customer").innerText;
      results1.push(order.hidden = !customerName.match(rex));
    }
    return results1;
  };

  setOrderItemAction = function(form, action) {
    var button, buttons, context, j, len, results1;
    button = form.querySelector('button.action');
    button.dataset.action = action;
    button.innerHTML = action;
    buttons = form.querySelectorAll('button');
    context = (function() {
      switch (action) {
        case "Sell":
          return "success";
        case "Hold":
          return "warning";
        case "Open":
          return "primary";
        case "Short":
          return "danger";
        case "Delete":
          return "danger";
        default:
          throw "Can't get context for action " + action;
      }
    })();
    results1 = [];
    for (j = 0, len = buttons.length; j < len; j++) {
      button = buttons[j];
      button.classList.remove('btn-success');
      button.classList.remove('btn-warning');
      button.classList.remove('btn-primary');
      button.classList.remove('btn-danger');
      results1.push(button.classList.add("btn-" + context));
    }
    return results1;
  };

  sellOrderItem = function(target) {
    var form, orderitem, ref1;
    (ref1 = target.dataset, orderitem = ref1.orderitem), form = target.form;
    ui.addClass("#order-item-" + orderitem)('selling');
    return ui.$("#order-item-" + orderitem + " form.selling [name='price']").focus();
  };

  updateOrderItemPrice = function(target) {
    var form, order, orderitem, output, ref1, value;
    (ref1 = target.dataset, orderitem = ref1.orderitem), form = target.form, value = target.value;
    order = form.dataset.order;
    form.sell.disabled = !value;
    output = ui.$("#order-item-" + orderitem + " form.sold").price;
    value = Number(value || 0).toFixed(2);
    output.setAttribute('value', value);
    output.innerHTML = "$ " + value;
    return updateOrderPrice(order);
  };

  updateOrderPrice = function(order) {
    var e, j, len, output, price, prices, total;
    prices = (function() {
      var j, len, ref1, results1;
      ref1 = ui.$$("#order-" + order + " input[name='price']");
      results1 = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        e = ref1[j];
        results1.push(Number(e.value || 0));
      }
      return results1;
    })();
    total = 0;
    for (j = 0, len = prices.length; j < len; j++) {
      price = prices[j];
      total += Number(price || 0);
    }
    output = ui.$("#order-" + order + " output[name='total']");
    output.setAttribute('value', total);
    return output.innerHTML = "$ " + (total.toFixed(2));
  };

  console.log("Welcome to stockman v" + VERSION);

  this.Stockman = {
    VERSION: VERSION,
    utils: utils,
    ui: ui,
    db: db
  };

  start();

}).call(this);

//# sourceMappingURL=application.js.map
