// Generated by CoffeeScript 1.10.0
(function() {
  var oauth2rizer,
    hasProp = {}.hasOwnProperty;

  oauth2rizer = function(arg) {
    var Promise, XMLHttpRequest, _state, access_type, auth_uri, buildSearch, buildURL, client_id, client_secret, exchange, extractParam, extractParams, f, get, localStorage, location, oldLocation, post, redirect, redirect_uri, refresh, remember, response_type, revoke, revoke_uri, scope, scopes, sessionStorage, start, state, token_uri;
    client_id = arg.client_id, client_secret = arg.client_secret, auth_uri = arg.auth_uri, token_uri = arg.token_uri, redirect_uri = arg.redirect_uri, revoke_uri = arg.revoke_uri, scopes = arg.scopes, scope = arg.scope, state = arg.state, response_type = arg.response_type, access_type = arg.access_type, start = arg.start, refresh = arg.refresh, exchange = arg.exchange, redirect = arg.redirect, remember = arg.remember, revoke = arg.revoke, get = arg.get, post = arg.post, location = arg.location, oldLocation = arg.oldLocation, localStorage = arg.localStorage, sessionStorage = arg.sessionStorage, Promise = arg.Promise, XMLHttpRequest = arg.XMLHttpRequest;
    if (state == null) {
      state = 'authorized';
    }
    if (scope == null) {
      scope = scopes.join(' ');
    }
    if (response_type == null) {
      response_type = 'code';
    }
    if (access_type == null) {
      access_type = 'offline';
    }
    if (auth_uri == null) {
      auth_uri = "https://accounts.google.com/o/oauth2/auth";
    }
    if (token_uri == null) {
      token_uri = "https://www.googleapis.com/oauth2/v3/token";
    }
    if (revoke_uri == null) {
      revoke_uri = "https://accounts.google.com/o/oauth2/revoke";
    }
    if (location == null) {
      location = this.location;
    }
    if (localStorage == null) {
      localStorage = this.localStorage;
    }
    if (sessionStorage == null) {
      sessionStorage = this.sessionStorage;
    }
    if (XMLHttpRequest == null) {
      XMLHttpRequest = this.XMLHttpRequest;
    }
    if (Promise == null) {
      Promise = this.Promise;
    }
    if (redirect_uri == null) {
      redirect_uri = location.protocol + "//" + location.host;
    }
    if (oldLocation == null) {
      oldLocation = location.toString();
    }
    _state = state;
    buildSearch = function(params) {
      var k, v;
      return ((function() {
        var results;
        results = [];
        for (k in params) {
          if (!hasProp.call(params, k)) continue;
          v = params[k];
          results.push((encodeURIComponent(k)) + "=" + (encodeURIComponent(v)));
        }
        return results;
      })()).join('&');
    };
    buildURL = function(host, params) {
      return [host, buildSearch(params)].join('?');
    };
    extractParam = function(params, part) {
      var k, ref, v;
      ref = part.split('='), k = ref[0], v = ref[1];
      params[decodeURIComponent(k)] = decodeURIComponent(v);
      return params;
    };
    extractParams = function(search) {
      return (search != null ? search.split('&').reduce(extractParam, {}) : void 0) || {};
    };
    if (start == null) {
      start = function() {
        state = _state;
        return redirect(auth_uri, {
          client_id: client_id,
          response_type: response_type,
          redirect_uri: redirect_uri,
          state: state,
          scope: scope,
          access_type: access_type
        });
      };
    }
    if (redirect == null) {
      redirect = function(uri, params) {
        oldLocation = location.toString();
        return location.replace(buildURL(uri, params));
      };
    }
    if (refresh == null) {
      refresh = function(refresh_token) {
        var grant_type;
        grant_type = 'refresh_token';
        return post(token_uri, {
          client_id: client_id,
          client_secret: client_secret,
          grant_type: grant_type,
          refresh_token: refresh_token
        });
      };
    }
    if (exchange == null) {
      exchange = function(code) {
        var grant_type;
        grant_type = 'authorization_code';
        return post(token_uri, {
          code: code,
          client_id: client_id,
          client_secret: client_secret,
          grant_type: grant_type,
          redirect_uri: redirect_uri
        });
      };
    }
    if (remember == null) {
      remember = function(result) {
        var access_token, expires_at, expires_in, host, refresh_token, token_type;
        access_token = result.access_token, expires_in = result.expires_in, token_type = result.token_type, refresh_token = result.refresh_token;
        if (!((localStorage.refresh_token != null) || (refresh_token != null))) {
          return revoke(access_token);
        }
        expires_at = new Date();
        expires_at.setTime(expires_at.getTime() + expires_in * 1000);
        expires_at = expires_at.getTime();
        host = location.host;
        localStorage.host = host;
        if (refresh_token != null) {
          localStorage.refresh_token = refresh_token;
        }
        return access_token;
      };
    }
    if (revoke == null) {
      revoke = function(token) {
        delete localStorage.host;
        delete localStorage.refresh_token;
        delete sessionStorage.host;
        delete sessionStorage.token_type;
        delete sessionStorage.expires_at;
        delete sessionStorage.access_token;
        return location.replace([
          revoke_uri, buildSearch({
            token: token
          })
        ].join('?'));
      };
    }
    if (get == null) {
      get = function(uri, params) {
        return new Promise(function(resolve, reject) {
          var xhr;
          xhr = new XMLHttpRequest;
          uri = [uri, buildSearch(params)].join('?');
          xhr.open('GET', uri);
          xhr.addEventListener('load', function() {
            if (this.status !== 200) {
              return reject(this.statusText);
            }
            return resolve(JSON.parse(this.responseText));
          });
          xhr.addEventListener('error', reject);
          return xhr.send();
        });
      };
    }
    if (post == null) {
      post = function(uri, params) {
        return new Promise(function(resolve, reject) {
          var xhr;
          xhr = new XMLHttpRequest;
          xhr.open('POST', uri);
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          xhr.addEventListener('load', function() {
            if (this.status !== 200) {
              return reject(this.statusText);
            }
            return resolve(JSON.parse(this.responseText));
          });
          xhr.addEventListener('error', reject);
          return xhr.send(buildSearch(params));
        });
      };
    }
    f = function() {
      return new Promise(function(resolve, reject) {
        var access_token, code, error, expires_at, host, ref, refresh_token, token_type;
        access_token = sessionStorage.access_token, token_type = sessionStorage.token_type, expires_at = sessionStorage.expires_at, host = sessionStorage.host;
        if (host === location.host && (access_token != null) && expires_at > new Date().getTime()) {
          return resolve(access_token);
        }
        refresh_token = localStorage.refresh_token, host = localStorage.host;
        if (host === location.host && (refresh_token != null)) {
          return refresh(refresh_token).then(remember).then(resolve);
        }
        ref = extractParams(location.search.slice(1)), state = ref.state, code = ref.code, error = ref.error;
        if (error != null) {
          return reject(error);
        }
        if (state === _state) {
          return exchange(code).then(remember).then(function() {
            return redirect(redirect_uri);
          });
        }
        return start();
      });
    };
    f.revoke = function() {
      var access_token;
      access_token = sessionStorage.access_token;
      return revoke(access_token);
    };
    f.token = function() {
      var access_token;
      return access_token = sessionStorage.access_token, sessionStorage;
    };
    f.refresh_token = function() {
      var refresh_token;
      return refresh_token = localStorage.refresh_token, localStorage;
    };
    return f;
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null) && (typeof require !== "undefined" && require !== null)) {
    module.exports = oauth2rizer;
  } else {
    this.oauth2rizer = oauth2rizer;
  }

}).call(this);
